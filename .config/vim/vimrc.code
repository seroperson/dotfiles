let g:type="code"

" {{{ plugin initialization

function! PluginInitialization()
    call dein#add('guns/xterm-color-table.vim')

    " json syntax and conceal
    call dein#add('elzr/vim-json', {'on_ft': 'json'})

    " rainbow brackets
    call dein#add('luochen1990/rainbow')

    " display indent levels
    call dein#add('Yggdroot/indentLine')

    " json pretty print
    call dein#add('tpope/vim-jdaddy')

    " shows a git diff in the 'gutter' (sign column)
    call dein#add('airblade/vim-gitgutter')

    " extremely easy tool to toggle commentary in lines and visual selections | gc, gcap, gcc; C-l
    call dein#add('tpope/vim-commentary')

    " highlights the matching html tag when the cursor is positioned on a tag
    call dein#add('gregsexton/MatchTag')

    " modern syntax highlight
    call dein#add('nvim-treesitter/nvim-treesitter', {'hook_post_update': 'TSUpdate'})
endfunction

" }}}

source $XDG_CONFIG_HOME/vim/vimrc.core

" {{{ rainbow configuration

let g:rainbow_active=1
let g:rainbow_conf={ 'ctermfgs': ['red', 'yellow', 'blue', 'magenta'], 'operators': '_,_', 'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'] }

" }}}

" {{{ indentline configuration

let g:indentLine_color_term=7
let g:indentLine_indentLevel=4
let g:indentLine_char='|'
let g:indentLine_conceallevel=2
let g:indentLine_concealcursor='cv'

" }}}

" {{{ gitgutter configuration

let g:gitgutter_map_keys=0

" }}}

" {{{ lua configuration

lua << EOF
  require('nvim-treesitter.configs').setup ({
    -- A list of parser names, or "all"
    ensure_installed = { "scala" },

    -- Install parsers synchronously (only applied to `ensure_installed`)
    sync_install = false,

    -- Automatically install missing parsers when entering buffer
    -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
    auto_install = true,

    -- List of parsers to ignore installing (for "all")
    ignore_install = { },

    highlight = {
      -- `false` will disable the whole extension
      enable = true,

      disable = { "latex", "markdown" },

      -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
      -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
      -- Using this option may slow down your editor, and you may see some duplicate highlights.
      -- Instead of true it can also be a list of languages
      additional_vim_regex_highlighting = false,
    },
  })
EOF


" {{{ filetypes

" *.pro files is a proguard configuration
au BufRead,BufNewFile *.pro setf proguard
" gradle buildconfig is written in groovy (and jenkinsfile too)
au BufRead,BufNewFile {*.gradle,Jenkinsfile} setf groovy
" xkb keyboard configuration
au BufRead,BufNewFile *.xkb setf xkb

" }}}

" {{{ tips and tricks

" {{{ extend syntax with my own 'todo' pattern

augroup vimrc_todo
    au!
    au Syntax * syn match MyTodo /\v<(todo|discuss)/ containedin=.*Comment,vimCommentTitle
augroup END
hi def link MyTodo Todo

" }}}

" }}}

" {{{ shortcuts

" <leader>j makes json pretty
command! JsonPretty exe jdaddy#reformat('jdaddy#outer_pos', v:count1)
nmap <silent> <leader>j :JsonPretty<CR>

" <leader>ev edits .vimrc
nnoremap <leader>ev :vsplit ~/.config/vim/vimrc<CR>

" }}}
